---
title: "Compare pandas ignoring NAN"
# author: "Tristan O'Malley"
date: "2023-06-14"
categories: [pandas, smalltips]
draft: true
---

If you ever needed to check that dataframes are exactly equal in values, 
you might know it should not be done with regular `==` operator.
The problem is in numpy, `np.nan == np.nan` gives `False`,
and when you run something like 

```python
import pandas as pd
import numpy as np

(
    pd.Series([1,2,3, np.nan, 5]) == 
    pd.Series([1,2,3, np.nan, 5])
).all()
```
it compares values elementwise and eventually gives `False`.

To try manually overcome this, with help of something like `.fillna(..)` - bad idea. You need different substitutors depending on dtype of the column,
and with `pd.Categorical` dtype it's especially troublesome - you need to extend your list of categories first.


Right way to do this is using of [`pd.equals(...)`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.equals.html) (don't confuse with [`pd.eq(...)`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.eq.html)!) or [assert_equal](https://pandas.pydata.org/docs/reference/api/pandas.testing.assert_frame_equal.html#pandas.testing.assert_frame_equal) in older versions of pandas:

```python
print(
    pd.Series([1,2,3, np.nan,5]).equals(
        pd.Series([1,2,3, np.nan, 5])
    )
)

assert_series_equal(
    pd.Series([1,2,3, np.nan,5]),
    pd.Series([1,2,3, np.nan, 5])
)
```

Keep in mind - sometimes you need to ignore columns order (maybe it's reordered for some reason):

```python
df1 = pd.DataFrame({
    'a': [1,2,np.nan],
    'b': ['x','y','z']
})
df2 = pd.DataFrame({
    'b': ['x','y','z'],
    'a': [1,2,np.nan],
})
pd.DataFrame.equals(
    df1,
    df2
)
# Output: False

pd.DataFrame.equals(
    df1.sort_index(), 
    df2.sort_index()
)
# Output: True
```

So, here's a final utility function which hopefully will save you some time:

```python
import pandas as pd

def is_df_eq(df1, df2) -> bool:
    return pd.DataFrame.equals(
        df1.sort_index(), 
        df2.sort_index()
    )

def diff_columns(df1, df2):
    """
    Helps to identify which columns are not equal
    """
    df1 = df1.sort_index()
    df2 = df2.sort_index()

    for c in df2.columns:
        print(c, ':', pd.Series.equals(
            df1[c],
            df2[c],
        ))
```